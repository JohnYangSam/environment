# Custom .bashrc configuration file. This should be sourced from
# .bashrc

if [[ $- != *i* ]] ; then
    # Shell is non-interactive, return now.
    return
fi

# Set vim as the default editor
export EDITOR="vim";

# Fix ^? weird character backspace issue on WSL: https://vim.fandom.com/wiki/Backspace_and_delete_problems
stty erase '^?'

# General Unix aliases

# Enable aliases to be sudo'ed
alias sudo='sudo '

# Safety
alias rm="rm -i"
alias mv="mv -i"
alias cp="cp -i"
set -o noclobber

# Directories, listings, and movement
alias ls='ls -G'
alias ll="ls -alrtFG"
alias la="ls -AG"
alias l="ls -CFG"
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'" # List only directories
alias m='less'
alias ..='cd ..'
alias ...='cd ..;cd ..'
alias md='mkdir'
alias cl='clear'
alias du='du -ch'
alias tree='tree -A -C'
alias treeacl='tree -A -C -L 2'
alias countfiles='for t in files links directories; do echo `find . -type ${t:0:1} | wc -l` $t; done 2> /dev/null'

# grep options (sadly deprecated)
# export GREP_OPTIONS='--color=auto' # default grep colorization

export GREP_COLOR='1;31'           # set color to green (we can apparently still use this setting)

# Now set grep to an alias w/ options we need to do two things (https://unix.stackexchange.com/questions/351083/colored-grep-output-not-grep-options-not-alias/614340#614340):
# 1) Set up an alias for our custom grep
# 2) Set up a fix for xargs so that it works with an alias
# NOTE: Remove this if you have Unix piping issues
alias xargs='xargs '
alias grep='\grep --color=auto'


# sorting options
# Keep GNU sort cross-platform sorting behavior
# According to: http://www.gnu.org/software/coreutils/faq/coreutils-faq.html#Sort-does-not-sort-in-normal-order_0021
unset LANG
export LC_ALL=POSIX

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en0"
alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

# MYSQL automatic root
alias mysqlu='mysql -u root'

# tmux aliases
alias tma='tmux attach -d -t'
alias git-tmux='tmux new -s $(basename $(pwd))'

# git shortcut
alias g='git'

# alias for valgrind leak checking on C programs
alias valgrindleak='valgrind --leak-check=full --show-reachable=yes'

# Helpful tools

# server the current directory locally
alias servedir='python -m SimpleHTTPServer'

# Stopwatch
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

# URL-encode a string
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

# Merge PDF files
# Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`
alias mergepdf='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'

# Kill all the tabs in Chrome to free memory
# [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"

# Reload the shell (i.e. invoke as a login shell)
alias reload="exec $SHELL -l"

# Fix ^H issue
stty erase ^H

# Mac specific volume aliases
if [[ `uname` == 'Darwin' ]]; then
    # See http://xkcd.com/530/
    alias stfu="osascript -e 'set volume output muted true'"
    alias pumpitup="osascript -e 'set volume 7'"
fi

# Mac Specific Homebrew Settings
if [[ `uname` == 'Darwin' ]]; then

    # Homebrew path fix (to use homebrew over system)
    export PATH=/usr/local/bin:$PATH

    # Override outdated OS X utils with GNU utils
    # This may cause some issues when building and you need mac core untils instead: https://github.com/Homebrew/legacy-homebrew/issues/19238
    export PATH="$(brew --prefix coreutils)/libexec/gnubin":$PATH

    # Link Homebrew casks in `/Applications` rather than `~/Applications`
    export HOMEBREW_CASK_OPTS="--appdir=/Applications"

    # Hombrew package tweaks

    #GNU utils (prefixed with 'g')
    # Uncomment below to use the real GNU names instead of the 'g' prefixes
    #PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"

    # Add GNU man pages
    MANPATH="$MANPATH:/usr/local/opt/gnu-sed/libexec/gnuman"

    # OS X has no `md5sum`, so use `md5` as a fallback
    command -v md5sum > /dev/null || alias md5sum="md5"

    # OS X has no `sha1sum`, so use `shasum` as a fallback
    command -v sha1sum > /dev/null || alias sha1sum="shasum"

    # Android
    # For homebrew installation
    #export ANDROID_HOME=/usr/local/Cellar/android-sdk/24.1_1/
    #export ANDROID_NDK=/usr/local/Cellar/android-ndk/r13b/
    # For Android Studio installation
    export ANDROID_HOME=~/Library/Android/sdk/
    export ANDROID_NDK=~/Library/Android/sdk/ndk-bundle
    export PATH=$PATH:$ANDROID_HOME/platform-tools/
    export PATH=$PATH:$ANDROID_HOME/tools/
    export PATH=$PATH:$ANDROID_HOME/tools/bin
    export PATH=$PATH:$ANDROID_NDK/
    export PATH=$PATH:$ANDROID_NDK/build/

    export STUDIO_JDK=$JDK_HOME # Fix for Android Studio JDK issues

    alias astudio='~/Applications/Android\ Studio.app/Contents/MacOS/studio &'

    export EDITOR=vim # so that arc uses vim as an editor

    # Java Home
    # Use specific path according to: http://stackoverflow.com/questions/6588390/where-is-java-home-on-osx-lion-10-7-mountain-lion-10-8-or-mavericks-10-9
    export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
    export JDK_HOME=`/usr/libexec/java_home -v 1.8`
    export PATH=$JAVA_HOME/bin:$PATH

    # Gradle
    export GRADLE_HOME=$HOME/bin/gradle-1.12
    # Executed ln -s $HOME/bin/gradle-1.12/bin/gradle $HOME/bin/gradle

    alias gradled='gradle --daemon' # Run gradle with a daemon to speed it up
fi

# Add tab completion for more Bash commands
# if which brew > /dev/null && [ -f "$(brew --prefix)/etc/bash_completion" ]; then
#    source "$(bash_completionrew --prefix)/etc/bash_completion";
#elif [ -f /etc/bash_completion ]; then
#    source /etc/bash_completion;
#fi;

# Export local bin path
export PATH=$PATH:$HOME/bin

# Add cwd (i.e. ".") to path
export PATH=$PATH:.

# Node nvm

if [[ `uname` == 'Darwin' ]]; then      # Mac Specific
    export NVM_DIR="$HOME/.nvm"
    source $(brew --prefix nvm)/nvm.sh  # for homebrew installed nvm
else                                    # Linux
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm on linux
fi

# Ruby nvm
# Load RVM into a shell session *as a function*
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# NOTE: nvm old settings may still be relevant for Mac OSX
# [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" 
# export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

# Use default Node
nvm use default > /dev/null # pipe to /dev/null to remove printout

# Python

# pyenv
# According to message from installer: https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# NOTE: Below Python setup might be redundant, but not messing with it for now

# On Mac OSX, use homebrew location so that we don't have conflicts
if [[ `uname` == 'Darwin' ]]; then
    export PYENV_ROOT=/usr/local/var/pyenv
fi

if [ -d "${PYENV_ROOT}" ]; then
  export PATH="${PYENV_ROOT}/bin:${PATH}"
  eval "$(pyenv init -)"
fi

if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
export PATH=/$HOME/.pyenv/shims:$PATH

# NOTE: Current setup for linux/install_tools.sh does NOT use pyenv-virtualenv
# virtualenv
# you'll need to reinstall each time you update pyenv

#VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python  # Set virtualenv python
# source /usr/local/bin/virtualenvwrapper.sh     # If installed from Homebrew

# Set pyenv-virtualenvwrapper
pyenv virtualenvwrapper                          # If pyenv-virtualenvwrapper is installed

# Get virtualenvwrapper to create a virtual environment using pyvenv instead of virtualenv
# From: https://github.com/pyenv/pyenv-virtualenvwrapper
export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true" 

# type virtualenvwrapper for useage (after this bash source it will be using the current
# pyenv python for the virtualenv created

# repl autocompletion
export PYTHONSTARTUP=$HOME/.pythonrc.py

# Allow non homebrew python to find qt
#export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH

# Bash completion
if [[ `uname` == 'Darwin' ]]; then                              # Mac OSX
    if [ -f $(brew --prefix)/etc/bash_completion ]; then
        . $(brew --prefix)/etc/bash_completion
    fi
fi
    # No need for prefix for linux (see linux/install_tools.sh for installation)

# git bash enhancer
# Set git autocompletion and PS1 integration
alias __git_ps1="git branch 2>/dev/null | grep '*' | sed 's/* \(.*\)/(\1)/'"
if [ -f /usr/local/git/contrib/completion/git-completion.bash ]; then
    . /usr/local/git/contrib/completion/git-completion.bash
fi
GIT_PS1_SHOWDIRTYSTATE=true

PS1='\[\033[32m\]\u@\h\[\033[00m\]:\[\033[34m\]\w\[\033[31m\]$(__git_ps1)\[\033[00m\]\$ '

# git autocompletion
source $HOME/.git-completion.bash

# Docker

# If using boot2docker
#export DOCKER_HOST=tcp://$(boot2docker ip 2>/dev/null):2375

# Standard docker host ip
#export DOCKER_HOST=tcp://192.168.59.103:2375

# If using docker-osx
# # No docker_host ip set (it is set by docker-osx)

# wireshark on Mac
if [[ `uname` == 'Darwin' ]]; then
    alias wireshark=wireshark-qt
fi

# Haskell platform
export PATH=$PATH:$HOME/.cabal/bin

### Heroku Toolbelt
export PATH="$PATH:/usr/local/heroku/bin"

# MYSQL Homebrew Root PWD
if [[ `uname` == 'Darwin' ]]; then
    #export MYSQL_ROOT_PASSWORD=''
    ### Development Export Variables
    export SECRET_KEY=test
    export MYSQL_ROOT_PASSWORD=test
fi

### Databases

# MYSQL server startup for Mac OSX
# To connect:
#     mysql -uroot

# To have launchd start mysql at login:
#     ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents
# Then to load mysql now:
#     launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist
# Or, if you don't want/need launchctl, you can just run:
#     mysql.server start

  # Postgresql server startup

# When installing the postgres gem, including ARCHFLAGS is recommended:
#    ARCHFLAGS="-arch x86_64" gem install pg

# To install gems without sudo, see the Homebrew wiki.

# To reload postgresql after an upgrade:
#     launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
#     launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
# Or, if you don't want/need launchctl, you can just run:
#     postgres -D /usr/local/var/postgres
export PATH=/home/johnys/.pyenv/bin/pyenv:$PATH
export PATH=/home/johnys/.pyenv/bin/pyenv:$PATH
